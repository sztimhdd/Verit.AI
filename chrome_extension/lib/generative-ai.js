"use strict";exports.HarmCategory=void 0,function(e){e.HARM_CATEGORY_UNSPECIFIED="HARM_CATEGORY_UNSPECIFIED",e.HARM_CATEGORY_HATE_SPEECH="HARM_CATEGORY_HATE_SPEECH",e.HARM_CATEGORY_SEXUALLY_EXPLICIT="HARM_CATEGORY_SEXUALLY_EXPLICIT",e.HARM_CATEGORY_HARASSMENT="HARM_CATEGORY_HARASSMENT",e.HARM_CATEGORY_DANGEROUS_CONTENT="HARM_CATEGORY_DANGEROUS_CONTENT"}(exports.HarmCategory||(exports.HarmCategory={})),exports.HarmBlockThreshold=void 0,function(e){e.HARM_BLOCK_THRESHOLD_UNSPECIFIED="HARM_BLOCK_THRESHOLD_UNSPECIFIED",e.BLOCK_LOW_AND_ABOVE="BLOCK_LOW_AND_ABOVE",e.BLOCK_MEDIUM_AND_ABOVE="BLOCK_MEDIUM_AND_ABOVE",e.BLOCK_ONLY_HIGH="BLOCK_ONLY_HIGH",e.BLOCK_NONE="BLOCK_NONE"}(exports.HarmBlockThreshold||(exports.HarmBlockThreshold={})),exports.HarmProbability=void 0,function(e){e.HARM_PROBABILITY_UNSPECIFIED="HARM_PROBABILITY_UNSPECIFIED",e.NEGLIGIBLE="NEGLIGIBLE",e.LOW="LOW",e.MEDIUM="MEDIUM",e.HIGH="HIGH"}(exports.HarmProbability||(exports.HarmProbability={})),exports.BlockReason=void 0,function(e){e.BLOCKED_REASON_UNSPECIFIED="BLOCKED_REASON_UNSPECIFIED",e.SAFETY="SAFETY",e.OTHER="OTHER"}(exports.BlockReason||(exports.BlockReason={})),exports.FinishReason=void 0,function(e){e.FINISH_REASON_UNSPECIFIED="FINISH_REASON_UNSPECIFIED",e.STOP="STOP",e.MAX_TOKENS="MAX_TOKENS",e.SAFETY="SAFETY",e.RECITATION="RECITATION",e.OTHER="OTHER"}(exports.FinishReason||(exports.FinishReason={})),exports.TaskType=void 0,function(e){e.TASK_TYPE_UNSPECIFIED="TASK_TYPE_UNSPECIFIED",e.RETRIEVAL_QUERY="RETRIEVAL_QUERY",e.RETRIEVAL_DOCUMENT="RETRIEVAL_DOCUMENT",e.SEMANTIC_SIMILARITY="SEMANTIC_SIMILARITY",e.CLASSIFICATION="CLASSIFICATION",e.CLUSTERING="CLUSTERING"}(exports.TaskType||(exports.TaskType={}));class GoogleGenerativeAIError extends Error{constructor(e){super(`[GoogleGenerativeAI Error]: ${e}`)}}class GoogleGenerativeAIResponseError extends GoogleGenerativeAIError{constructor(e,t){super(e),this.response=t}}const BASE_URL="https://generativelanguage.googleapis.com",API_VERSION="v1",PACKAGE_VERSION="0.1.3",PACKAGE_LOG_HEADER="genai-js";var Task;!function(e){e.GENERATE_CONTENT="generateContent",e.STREAM_GENERATE_CONTENT="streamGenerateContent",e.COUNT_TOKENS="countTokens",e.EMBED_CONTENT="embedContent",e.BATCH_EMBED_CONTENTS="batchEmbedContents"}(Task||(Task={}));class RequestUrl{constructor(e,t,n,s){this.model=e,this.task=t,this.apiKey=n,this.stream=s}toString(){let e=`${BASE_URL}/v1/models/${this.model}:${this.task}`;return this.stream&&(e+="?alt=sse"),e}}function getClientHeaders(){return"genai-js/0.1.3"}async function makeRequest(e,t){let n;try{if(n=await fetch(e.toString(),{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-client":getClientHeaders(),"x-goog-api-key":e.apiKey},body:t}),!n.ok){let e="";try{const t=await n.json();e=t.error.message,t.error.details&&(e+=` ${JSON.stringify(t.error.details)}`)}catch(e){}throw new Error(`[${n.status} ${n.statusText}] ${e}`)}}catch(t){const n=new GoogleGenerativeAIError(`Error fetching from ${e.toString()}: ${t.message}`);throw n.stack=t.stack,n}return n}function addHelpers(e){return e.text=()=>{if(e.candidates&&e.candidates.length>0){if(e.candidates.length>1&&e.candidates.length,hadBadFinishReason(e.candidates[0]))throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(e)}`,e);return getText(e)}if(e.promptFeedback)throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(e)}`,e);return""},e}function getText(e){var t,n,s,o;return(null===(o=null===(s=null===(n=null===(t=e.candidates)||void 0===t?void 0:t[0].content)||void 0===n?void 0:n.parts)||void 0===s?void 0:s[0])||void 0===o?void 0:o.text)?e.candidates[0].content.parts[0].text:""}const badFinishReasons=[exports.FinishReason.RECITATION,exports.FinishReason.SAFETY];function hadBadFinishReason(e){return!!e.finishReason&&badFinishReasons.includes(e.finishReason)}function formatBlockErrorMessage(e){var t,n,s;let o="";if(e.candidates&&0!==e.candidates.length||!e.promptFeedback){if(null===(s=e.candidates)||void 0===s?void 0:s[0]){const t=e.candidates[0];hadBadFinishReason(t)&&(o+=`Candidate was blocked due to ${t.finishReason}`,t.finishMessage&&(o+=`: ${t.finishMessage}`))}}else o+="Response was blocked",(null===(t=e.promptFeedback)||void 0===t?void 0:t.blockReason)&&(o+=` due to ${e.promptFeedback.blockReason}`),(null===(n=e.promptFeedback)||void 0===n?void 0:n.blockReasonMessage)&&(o+=`: ${e.promptFeedback.blockReasonMessage}`);return o}function __await(e){return this instanceof __await?(this.v=e,this):new __await(e)}function __asyncGenerator(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s,o=n.apply(e,t||[]),r=[];return s={},a("next"),a("throw"),a("return"),s[Symbol.asyncIterator]=function(){return this},s;function a(e){o[e]&&(s[e]=function(t){return new Promise((function(n,s){r.push([e,t,n,s])>1||i(e,t)}))})}function i(e,t){try{(n=o[e](t)).value instanceof __await?Promise.resolve(n.value.v).then(c,d):E(r[0][2],n)}catch(e){E(r[0][3],e)}var n}function c(e){i("next",e)}function d(e){i("throw",e)}function E(e,t){e(t),r.shift(),r.length&&i(r[0][0],r[0][1])}}"function"==typeof SuppressedError&&SuppressedError;const responseLineRE=/^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;function processStream(e){const t=getResponseStream(e.body.pipeThrough(new TextDecoderStream("utf8",{fatal:!0}))),[n,s]=t.tee();return{stream:generateResponseSequence(n),response:getResponsePromise(s)}}async function getResponsePromise(e){const t=[],n=e.getReader();for(;;){const{done:e,value:s}=await n.read();if(e)return addHelpers(aggregateResponses(t));t.push(s)}}function generateResponseSequence(e){return __asyncGenerator(this,arguments,(function*(){const t=e.getReader();for(;;){const{value:e,done:n}=yield __await(t.read());if(n)break;yield yield __await(addHelpers(e))}}))}function getResponseStream(e){const t=e.getReader();return new ReadableStream({start(e){let n="";return function s(){return t.read().then((({value:t,done:o})=>{if(o)return n.trim()?void e.error(new GoogleGenerativeAIError("Failed to parse stream")):void e.close();n+=t;let r,a=n.match(responseLineRE);for(;a;){try{r=JSON.parse(a[1])}catch(t){return void e.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${a[1]}"`))}e.enqueue(r),n=n.substring(a[0].length),a=n.match(responseLineRE)}return s()}))}()}})}function aggregateResponses(e){const t=e[e.length-1],n={promptFeedback:null==t?void 0:t.promptFeedback};for(const t of e)if(t.candidates)for(const e of t.candidates){const t=e.index;if(n.candidates||(n.candidates=[]),n.candidates[t]||(n.candidates[t]={index:e.index}),n.candidates[t].citationMetadata=e.citationMetadata,n.candidates[t].finishReason=e.finishReason,n.candidates[t].finishMessage=e.finishMessage,n.candidates[t].safetyRatings=e.safetyRatings,e.content&&e.content.parts){n.candidates[t].content||(n.candidates[t].content={role:e.content.role||"user",parts:[{text:""}]});for(const s of e.content.parts)s.text&&(n.candidates[t].content.parts[0].text+=s.text)}}return n}async function generateContentStream(e,t,n){const s=new RequestUrl(t,Task.STREAM_GENERATE_CONTENT,e,!0);return processStream(await makeRequest(s,JSON.stringify(n)))}async function generateContent(e,t,n){const s=new RequestUrl(t,Task.GENERATE_CONTENT,e,!1),o=await makeRequest(s,JSON.stringify(n));return{response:addHelpers(await o.json())}}function formatNewContent(e,t){let n=[];if("string"==typeof e)n=[{text:e}];else for(const t of e)"string"==typeof t?n.push({text:t}):n.push(t);return{role:t,parts:n}}function formatGenerateContentInput(e){if(e.contents)return e;return{contents:[formatNewContent(e,"user")]}}function formatEmbedContentInput(e){if("string"==typeof e||Array.isArray(e)){return{content:formatNewContent(e,"user")}}return e}const SILENT_ERROR="SILENT_ERROR";class ChatSession{constructor(e,t,n){this.model=t,this.params=n,this._history=[],this._sendPromise=Promise.resolve(),this._apiKey=e,(null==n?void 0:n.history)&&(this._history=n.history.map((e=>{if(!e.role)throw new Error("Missing role for history item: "+JSON.stringify(e));return formatNewContent(e.parts,e.role)})))}async getHistory(){return await this._sendPromise,this._history}async sendMessage(e){var t,n;await this._sendPromise;const s=formatNewContent(e,"user"),o={safetySettings:null===(t=this.params)||void 0===t?void 0:t.safetySettings,generationConfig:null===(n=this.params)||void 0===n?void 0:n.generationConfig,contents:[...this._history,s]};let r;return this._sendPromise=this._sendPromise.then((()=>generateContent(this._apiKey,this.model,o))).then((e=>{var t;if(e.response.candidates&&e.response.candidates.length>0){this._history.push(s);const n=Object.assign({parts:[],role:"model"},null===(t=e.response.candidates)||void 0===t?void 0:t[0].content);this._history.push(n)}else{formatBlockErrorMessage(e.response)}r=e})),await this._sendPromise,r}async sendMessageStream(e){var t,n;await this._sendPromise;const s=formatNewContent(e,"user"),o={safetySettings:null===(t=this.params)||void 0===t?void 0:t.safetySettings,generationConfig:null===(n=this.params)||void 0===n?void 0:n.generationConfig,contents:[...this._history,s]},r=generateContentStream(this._apiKey,this.model,o);return this._sendPromise=this._sendPromise.then((()=>r)).catch((e=>{throw new Error(SILENT_ERROR)})).then((e=>e.response)).then((e=>{if(e.candidates&&e.candidates.length>0){this._history.push(s);const t=Object.assign({},e.candidates[0].content);t.role||(t.role="model"),this._history.push(t)}else{formatBlockErrorMessage(e)}})).catch((e=>{e.message!==SILENT_ERROR&&console.error(e)})),r}}async function countTokens(e,t,n){const s=new RequestUrl(t,Task.COUNT_TOKENS,e,!1);return(await makeRequest(s,JSON.stringify(Object.assign(Object.assign({},n),{model:t})))).json()}async function embedContent(e,t,n){const s=new RequestUrl(t,Task.EMBED_CONTENT,e,!1);return(await makeRequest(s,JSON.stringify(n))).json()}async function batchEmbedContents(e,t,n){const s=new RequestUrl(t,Task.BATCH_EMBED_CONTENTS,e,!1),o=n.requests.map((e=>Object.assign(Object.assign({},e),{model:`models/${t}`})));return(await makeRequest(s,JSON.stringify({requests:o}))).json()}class GenerativeModel{constructor(e,t){var n;this.apiKey=e,t.model.startsWith("models/")?this.model=null===(n=t.model.split("models/"))||void 0===n?void 0:n[1]:this.model=t.model,this.generationConfig=t.generationConfig||{},this.safetySettings=t.safetySettings||[]}async generateContent(e){const t=formatGenerateContentInput(e);return generateContent(this.apiKey,this.model,Object.assign({generationConfig:this.generationConfig,safetySettings:this.safetySettings},t))}async generateContentStream(e){const t=formatGenerateContentInput(e);return generateContentStream(this.apiKey,this.model,Object.assign({generationConfig:this.generationConfig,safetySettings:this.safetySettings},t))}startChat(e){return new ChatSession(this.apiKey,this.model,e)}async countTokens(e){const t=formatGenerateContentInput(e);return countTokens(this.apiKey,this.model,t)}async embedContent(e){const t=formatEmbedContentInput(e);return embedContent(this.apiKey,this.model,t)}async batchEmbedContents(e){return batchEmbedContents(this.apiKey,this.model,e)}}class GoogleGenerativeAI{constructor(e){this.apiKey=e}getGenerativeModel(e){if(!e.model)throw new GoogleGenerativeAIError("Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })");return new GenerativeModel(this.apiKey,e)}}exports.ChatSession=ChatSession,exports.GenerativeModel=GenerativeModel,exports.GoogleGenerativeAI=GoogleGenerativeAI;